#!/usr/bin/env bash
## configure compiler flags for c++ source files.

# use this file as a reference.
src='.init.o.cmd'

# extra c++ flags to make things work in kernel.

# the file prefix. If compiling fs.cpp, then prefix is 'fs'.
if [[ $# -lt 1 ]]; then
    echo "usage: configure [c++ source prefix] [extra g++ flags]"
    exit 1
fi

prefix=$1
extra_CXXFLAGS=$2
cmd=".$prefix.o.cmd"
script=".$prefix.o.sh"
dep=".$prefix.o.d"
CXXFLAGS="-fno-rtti -fno-exceptions -ffreestanding -nostdlib $extra_CXXFLAGS"

/usr/bin/env printf '\x23/usr/bin/env sh\x0a\x0a' > $script
/usr/bin/env printf '%s %s' "savedcmd_$prefix.o" ":=" > $cmd

i=0
CC=gcc
for token in $( cat $src | head -n 1 ); do
    if [[ $i -lt 2 ]]; then
        i=$(($i+1))
        continue
    fi
    case $i in
        0) i=$(($i+1)); continue;;
        1) i=$(($i+1)); continue;;
        2) CC=$token;;
        3) i=$(($i+1)); continue;;
    esac
    
    # skip init.c, init.o and -c -o
    case $token in
        init.*) i=$((i+1)); continue;;
        -c) i=$((i+1)); continue;;
        -o) i=$((i+1)); continue;;
        -std=*) i=$((i+1)); continue;;
        -Werror=implicit-int) i=$((i+1)); continue;;
        -Werror=implicit-function-declaration) i=$((i+1)); continue;;
        -Wmissing-prototypes) i=$((i+1)); continue;;
        -Werror=strict-prototypes) i=$((i+1)); continue;;
        -Wno-pointer-sign) i=$((i+1)); continue;;
        -Werror=incompatible-pointer-types) i=$((i+1)); continue;;
        -Werror=designated-init) i=$((i+1)); continue;;
        -Wno-override-init) i=$((i+1)); continue;;
    esac
    /usr/bin/env printf '\t%s \x5c\x0a' $token >> $script
    /usr/bin/env printf ' %s' $token >> $cmd
    i=$(($i+1))
done

# rest of the script.
/usr/bin/env printf '\t%s  \x5c\n' $CXXFLAGS >> $script
/usr/bin/env printf '\t-std=c++11 -c -o %s %s \x5c\n' "$prefix.o" "$prefix.cpp" >> $script
/usr/bin/env printf '\t%s %s %s\n' "-MD" "-MF" $dep >> $script
# rest of the .cmd (TODO)
echo ' ' $CXXFLAGS '-std=c++11' -c -o "$prefix.o" "$prefix.cpp" '-MD' '-MF' $dep >> $cmd
echo "source_$prefix.o := $prefix.cpp" >> $cmd
/usr/bin/env printf "\n$prefix.o: \x24\x28deps_%s.o\x29 \n\n" $prefix >> $cmd
/usr/bin/env printf "\x24\x28deps_%s.o\x29: \n\n" $prefix >> $cmd

exit 0
